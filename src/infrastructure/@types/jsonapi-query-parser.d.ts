/** Declaration file generated by dts-gen */
type PrimitiveValue = boolean | number | string | Date | undefined;

declare module 'jsonapi-query-parser' {
  interface IFilter {
    like: Record<string, PrimitiveValue>;
    not: Record<string, PrimitiveValue>;
    lt: Record<string, PrimitiveValue>;
    lte: Record<string, PrimitiveValue>;
    gt: Record<string, PrimitiveValue>;
    gte: Record<string, PrimitiveValue>;
    [key: string]: unknown;
  }
  interface IQueryData {
    include: Array<PrimitiveValue>;
    fields: Record<string, unknown>;
    sort: Array<PrimitiveValue>;
    page: Record<string, unknown | undefined>;
    filter: Record<string, unknown>;
  }
  export interface IRequestData {
    resourceType: PrimitiveValue | null;
    identifier: Omit<PrimitiveValue, undefined> | null;
    relationships: boolean;
    relationshipType: PrimitiveValue | null;
    queryData: IQueryData;
  }

  export default class JsonApiQueryParser {
    constructor();
    /**
     * [Delegates each query string piece to its own parser function.]
     *
     * @param {[string]} query [Required query string piece. Example: "fields[article]=title,body".]
     * @return {[object]} requestData [Parsed request information as object.]
     *
     **/
    delegateToParser(query: string): IRequestData;
    /**
     * [Cuts up the endpoint path to define the requested resource, identifier and relationships.]
     *
     * @param {[string]} endpointString [Required endpoint string. Example: "articles/6/comments".]
     * @param {[object]} requestObject [Required reference to the main requestData object.]
     * @return {[object]} requestData [Parsed request information as object.]
     *
     **/
    parseEndpoint(
      endpointString: string,
      requestObject: IRequestData,
    ): IRequestData;
    /**
     * [Cuts up the query parameters and sends each piece to the delegate function.]
     *
     * @param {[string]} queryString [Required query string. Example: "?include=comments,user&fields[article]=title,body" ]
     * @param {[object]} requestDataSubset [Required reference to the main requestData object.]
     * @return {[object]} requestData [Parsed request information as object.]
     *
     **/
    parseQueryParameters(
      queryString: string,
      requestDataSubset: IQueryData,
    ): IQueryData;
    /**
     * [Defines the requestData object to modify via given queryString. NOTE: filter query is not implemented due to lack of specs.]
     *
     * @param {[string]} url [Required url containing the endpoint path and query string.]
     * @return {[object]} requestData [Parsed request information as object.]
     *
     **/
    parseRequest(url: string): IRequestData;
    /**
     * [Parses the fields query string piece and returns the modified _requestDataSubset.]
     *
     * @param {[string]} fieldsString [Required fields query string piece. Example: "fields[article]=title,body".]
     * @param {[object]} requestDataSubset [Required reference to the requestData.queryData object.]
     * @return {[object]} requestDataSubset [Returning the modified request data.]
     *
     **/
    static parseFields(
      fieldsString: string,
      requestDataSubset: IQueryData,
    ): IQueryData;
    /**
     * [Note: The are no proper specifications for this parameter yet.
     * For now the filter is implemented similar to the fields parameter. Values should be url encoded to allow for special characters.]
     *
     * @param {[string]} filterString [Required sort query string piece. Example: "filter[name]=John%20Doe".]
     * @param {[object]} requestDataSubset [Required reference to the requestData.queryData object.]
     * @return {[object]} requestDataSubset [Returning the modified request data.]
     *
     **/
    static parseFilter(
      filterString: string,
      requestDataSubset: IQueryData,
    ): IQueryData;
    /**
     * [Note: The are no proper specifications for this parameter yet.
     * For now the filter is implemented similar to the fields parameter. Values should be url encoded to allow for special characters.]
     *
     * @param {[string]} filterString [Required sort query string piece. Example: "filter[name][like]=John%20Doe".]
     * @param {[object]} requestDataSubset [Required reference to the requestData.queryData object.]
     * @return {[object]} requestDataSubset [Returning the modified request data.]
     *
     **/
    static parseFilterType(
      filterString: string,
      requestDataSubset: IQueryData,
    ): IQueryData;
    /**
     * [Parses the include query string piece and returns the modified _requestDataSubset.]
     *
     * @param {[string]} includeString [Required include string piece. Example: "include=comments,user".]
     * @param {[object]} requestDataSubset [Required reference to the requestData.queryData object.]
     * @return {[object]} requestDataSubset [Returning the modified request data.]
     *
     **/
    static parseInclude(
      includeString: string,
      requestDataSubset: IQueryData,
    ): IQueryData;
    /**
     * [Parses the page query string piece and returns the modified _requestDataSubset.]
     *
     * @param {[string]} pageString [Required page query string piece. Example: "page[offset]=20".]
     * @param {[object]} requestDataSubset [Required reference to the requestData.queryData object.]
     * @return {[object]} requestDataSubset [Returning the modified request data.]
     *
     **/
    static parsePage(
      pageString: string,
      requestDataSubset: IQueryData,
    ): IQueryData;
    /**
     * [Parses the sort query string piece and returns the modified _requestDataSubset.]
     *
     * @param {[string]} sortString [Required sort query string piece. Example: "sort=-created,title".]
     * @param {[object]} requestDataSubset [Required reference to the requestData.queryData object.]
     * @return {[object]} requestDataSubset [Returning the modified request data.]
     *
     **/
    static parseSort(
      sortString: string,
      requestDataSubset: IQueryData,
    ): IQueryData;
    /**
     * [Slash trim to avoid faulty endpoint mapping. Runs recursively to remove any double slash errors]
     *
     * @param {[string]} input [Required input to be trimmed. Example: "/article/1/".]
     * @return {[string]} [Returning the modified string.]
     *
     **/
    static trimSlashes(input): string;
  }
}
